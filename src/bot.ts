import {Telegraf, Context, Markup} from 'telegraf';
import * as dotenv from 'dotenv';
import { startCommand } from './commands/start';
import { socialsCommand } from './commands/socials';
import { suggestionCommand } from './commands/suggestion';
import { siteCommand } from './commands/site';
import { aboutCommand } from './commands/about';
import { handleUseAction, handleUseCommand } from './utils/helpers';
import {channelCommand} from './commands/channel';
import {playlistCommand} from './commands/playlist';

dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN as string);
const CHAT_ID = process.env.CHAT_ID as string;

// –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates: { [key: number]: string | undefined } = {};

// –ö–æ–º–∞–Ω–¥—ã –∏ –∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
const commands = [
	{ command: 'start', handler: startCommand },
	{ command: 'socials', handler: socialsCommand },
	{ command: 'suggestion', handler: suggestionCommand },
	{ command: 'site', handler: siteCommand },
	{ command: 'about', handler: aboutCommand },
	{ command: 'channel', handler: channelCommand },
	{ command: 'playlist', handler: playlistCommand },
];

const mainMenuKeyboard = () => {
	return Markup.keyboard([
		[{ text: 'üìã–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é' }],  // –ö–Ω–æ–ø–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
	])
		.resize()
		.oneTime(false);
}
mainMenuKeyboard();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ –∏ –¥–µ–π—Å—Ç–≤–∏–π
const registerCommandsAndActions = (bot: Telegraf<Context>) => {
	commands.forEach(({ command, handler }) => {
		bot.command(command, async (ctx) => {
			userStates[ctx.from.id] = command === 'suggestion' ? 'suggestion' : undefined;
			await handleUseCommand(ctx, handler);
		});

		bot.action(command, async (ctx) => {
			userStates[ctx.from.id] = command === 'suggestion' ? 'suggestion' : undefined;
			await handleUseAction(ctx, handler);
		});
	});
};

// –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ –∏ –¥–µ–π—Å—Ç–≤–∏–π
registerCommandsAndActions(bot);

// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.action('back', async (ctx) => {
	userStates[ctx.from.id] = undefined; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	await startCommand(ctx);
});

bot.hears('–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é', async (ctx: Context) => {
	await startCommand(ctx);
	if (ctx.from) {
		userStates[ctx.from.id] = undefined; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	}
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.on(['text', 'photo', 'audio'], async (ctx: Context) => {
	if (!ctx.from) {
		return;
	}
	const userState = userStates[ctx.from.id];

	if (userState === 'suggestion') {
		try {
			// –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
			await ctx.forwardMessage(CHAT_ID);
			await ctx.reply('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');

			// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
			await startCommand(ctx);
			if (ctx.from) {
				userStates[ctx.from.id] = undefined; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
			}
		} catch (error) {
			await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
		}
	} else {
		await ctx.reply('–í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /suggestion –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –º–µ–¥–∏–∞.');
	}
});

bot.launch();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
